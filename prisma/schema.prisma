generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  projects ProjectMember[]

  logs Log[]
}

// Projects

enum Role {
  OWNER
  MANAGER
  DEVELOPER
}

model Client {
  id   Int    @id @default(autoincrement())
  name String @unique

  projects Project[]
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String
  description String?
  color       String?

  tickets Ticket[]
  members ProjectMember[]

  archived     Boolean       @default(false)
  ticketStates TicketState[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?
}

model ProjectMember {
  id String @id @default(cuid())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId Int
  userId    String

  assignedTo Ticket[] @relation("assignee")
  reportedBy Ticket[] @relation("reporter")

  role Role @default(DEVELOPER)

  @@unique([projectId, userId])
}

// Tickets

model TicketState {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name      String
  order     Int
  projectId Int
  tickets   Ticket[]

  @@unique([projectId, name])
}

model Ticket {
  id Int @id @default(autoincrement())

  name        String
  description String

  assignee   ProjectMember? @relation("assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId String?

  reporter   ProjectMember? @relation("reporter", fields: [reporterId], references: [id], onDelete: SetNull)
  reporterId String?

  state     TicketState? @relation(fields: [stateName, projectId], references: [name, projectId], onUpdate: Cascade, onDelete: Cascade)
  stateName String?

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

// NextAuth

model Account {
  id                       String  @id @default(cuid())
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Log {
  id Int @id @default(autoincrement())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  text      String
  createdAt DateTime @default(now())
}
