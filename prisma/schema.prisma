generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  id       Int    @id @default(autoincrement())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]

  projects ProjectMember[]
}

// Projects

enum Role {
  OWNER
  MANAGER
  DEVELOPER
}

model Client {
  id   Int    @id @default(autoincrement())
  name String

  projects Project[]
}

model Project {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  tickets Ticket[]
  members ProjectMember[]

  archived     Boolean       @default(false)
  ticketStates TicketState[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client   Client? @relation(fields: [clientId], references: [id])
  clientId Int?
}

model ProjectMember {
  id Int @id @default(autoincrement())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  projectId Int
  userId    Int

  assignedTo Ticket[] @relation("assignee")
  reportedBy Ticket[] @relation("reporter")

  role Role @default(DEVELOPER)

  @@unique([projectId, userId])
}

// Tickets

model TicketState {
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name      String   @id
  color     String
  order     Int
  projectId Int
  Ticket    Ticket[]
}

model Ticket {
  id Int @id @default(autoincrement())

  name        String
  description String

  assignee   ProjectMember? @relation("assignee", fields: [assigneeId], references: [id], onDelete: SetNull)
  assigneeId Int?

  reporter   ProjectMember? @relation("reporter", fields: [reporterId], references: [id], onDelete: SetNull)
  reporterId Int?

  state     TicketState @relation(fields: [stateName], references: [name])
  stateName String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId Int
}

// NextAuth

model Account {
  id                 String    @id @default(cuid())
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user               User      @relation(fields: [userId], references: [id])
  userId             Int

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user         User     @relation(fields: [userId], references: [id])
  userId       Int
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}